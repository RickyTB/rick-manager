{"version":3,"sources":["util/constants.ts","components/UI/ColorModeSwitcher/ColorModeSwitcher.tsx","components/Navigation/Toolbar/Toolbar.tsx","containers/CalendarView/CalendarView.tsx","hooks/use-input.ts","hooks/use-db.ts","db/index.ts","db/db.ts","hooks/use-header-panel.ts","hooks/use-item-color.ts","components/UI/Subject/Subject.tsx","components/UI/AddSubject/AddSubject.tsx","lib/chakra-markdown-renderer.tsx","components/UI/ExpandableTextarea/ExpandableTextarea.tsx","components/UI/TextareaPreview/TextareaPreview.tsx","components/UI/AddTask/ContentInput/ContentInput.tsx","components/UI/AddTask/SubjectSelect/SubjectSelect.tsx","components/UI/AddTask/DueDatePicker/DueDatePicker.tsx","components/UI/AddTask/AddTask.tsx","components/UI/Task/Task.tsx","components/UI/DeleteButton/DeleteButton.tsx","containers/ListView/SubjectList/SubjectList.tsx","hooks/use-error-effect.ts","containers/ListView/TaskList/TaskList.tsx","containers/ListView/TaskView/TaskView.tsx","containers/ListView/ListView.tsx","components/Layout/Layout.tsx","hooks/use-update-effect.ts","theme/index.ts","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ViewMode","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","VIEW_MODE_LS_KEY","Toolbar","viewMode","onChangeViewMode","onAddNote","bg","as","p","justify","position","top","left","right","zIndex","boxShadow","isAttached","colorScheme","borderRadius","isActive","Calendar","BsCalendarFill","List","BsListTask","mr","leftIcon","Add","CalendarView","textAlign","pt","TransactionState","ActionType","db","subjects","tasks","version","stores","table","Dexie","initialStore","state","Idle","error","undefined","reducer","store","action","type","Begin","Loading","Commit","Error","payload","useDB","cb","tables","dependencies","useReducer","dispatch","useEffect","transaction","a","catch","e","useHeaderPanel","useItemColor","Subject","name","count","hoverBg","py","borderBottomWidth","borderLeft","display","w","whiteSpace","_hover","px","ml","float","AddSubject","onSubmit","initialValue","useState","value","setValue","handleChange","useCallback","target","useInput","setName","setColor","handleColorChange","newValue","hex","id","isRequired","mb","placeholder","onChange","width","disabled","getCoreProps","defaults","children","em","blockquote","code","inline","className","language","replace","style","tomorrow","showLineNumbers","del","hr","Link","img","Image","ul","ordered","depth","attrs","Element","UnorderedList","styleType","OrderedList","spacing","pl","ol","li","checked","checkbox","isChecked","isReadOnly","listStyleType","heading","level","my","pre","Table","thead","Thead","tbody","Tbody","tr","Tr","td","Td","th","Th","ChakraUIRenderer","theme","merge","elements","h1","h2","h3","h4","h5","h6","deepmerge","chakraUIRenderer","ExpandableTextarea","React","forwardRef","ref","focusBorderColor","rows","fontFamily","bgColor","onInput","current","height","Math","max","scrollHeight","TextareaPreview","align","flex","plugins","gfm","components","ContentInput","_","useField","field","helpers","SubjectSelect","setSubjects","orderBy","toArray","required","map","subject","DueDatePicker","htmlFor","selected","showPopperArrow","locale","showTimeSelect","timeFormat","timeIntervals","dateFormat","initialValues","content","dueDate","Date","subjectId","AddTask","onClose","isOpen","onTaskAdded","initialRef","useRef","handleSubmit","values","newTask","createdAt","finished","add","closeOnOverlayClick","initialFocusRef","scrollBehavior","maxW","direction","Task","maxH","overflow","fontStyle","Time","formatDistanceToNow","es","addSuffix","Check","Minus","DeleteButton","title","useDisclosure","onOpen","cancelRef","handleClick","Delete","leastDestructiveRef","fontWeight","SubjectList","selectedId","onSelect","reload","setReload","onToggle","toast","useToast","where","equals","and","dbState","effect","useErrorEffect","description","message","status","duration","isClosable","handleAddSubject","overflowY","shadow","r","Repeat","TaskList","selectedTask","setTasks","upcTasks","setUpcTasks","pastTasks","setPastTasks","sortBy","indexOf","task","isFuture","push","length","TaskView","onUpdate","onDelete","isEdit","setIsEdit","updatedContent","setUpdatedContent","updatedDate","setUpdatedDate","textRef","handleUpdate","update","handleDelete","delete","handleCloseEdit","IoSaveOutline","Edit","mt","format","ListView","selectedSubject","setSelectedSubject","setSelectedTask","h","paddingTop","loadViewMode","localStorage","getItem","Layout","setViewMode","resetting","setResetting","isInitialMount","useUpdateEffect","setItem","setTimeout","extendTheme","styles","global","body","mode","colors","primary","accent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","registerLocale","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.da158e87.chunk.js","sourcesContent":["export enum ViewMode {\n  Calendar = \"calendar\",\n  List = \"list\",\n}\n\nexport const VIEW_MODE_LS_KEY = \"rick-manager-view-mode\";\n","import * as React from \"react\";\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">;\n\nconst ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue(\"dark\", \"light\");\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n\nexport default ColorModeSwitcher;\n","import { FC } from \"react\";\nimport {\n  Flex,\n  Box,\n  Heading,\n  Button,\n  ButtonGroup,\n  IconButton,\n  Icon,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { AddIcon } from \"@chakra-ui/icons\";\nimport { BsCalendarFill, BsListTask } from \"react-icons/bs\";\nimport ColorModeSwitcher from \"../../UI/ColorModeSwitcher\";\nimport { ViewMode } from \"../../../util/constants\";\n\nexport interface ToolbarProps {\n  viewMode: ViewMode;\n  onChangeViewMode: (mode: ViewMode) => void;\n  onAddNote: () => void;\n}\n\nexport const Toolbar: FC<ToolbarProps> = ({\n  viewMode,\n  onChangeViewMode,\n  onAddNote,\n}) => {\n  const bg = useColorModeValue(\"primary.500\", \"primary.300\");\n  const color = useColorModeValue(\"white\", \"gray.800\");\n  return (\n    <Flex\n      as=\"nav\"\n      p={2}\n      justify=\"space-between\"\n      bg={bg}\n      color={color}\n      position=\"fixed\"\n      top=\"0\"\n      left=\"0\"\n      right=\"0\"\n      zIndex=\"1\"\n      boxShadow=\"sm\"\n    >\n      <Box>\n        <ButtonGroup isAttached variant=\"solid\" colorScheme=\"accent\">\n          <IconButton\n            borderRadius=\"md\"\n            isActive={viewMode === ViewMode.Calendar}\n            aria-label=\"Show calendar\"\n            icon={<Icon as={BsCalendarFill} />}\n            onClick={() => onChangeViewMode(ViewMode.Calendar)}\n          />\n          <IconButton\n            borderRadius=\"md\"\n            isActive={viewMode === ViewMode.List}\n            aria-label=\"Show list\"\n            icon={<Icon as={BsListTask} />}\n            onClick={() => onChangeViewMode(ViewMode.List)}\n          />\n        </ButtonGroup>\n      </Box>\n      <Box p=\"2\">\n        <Heading size=\"md\">Rick Manager</Heading>\n      </Box>\n      <Box>\n        <ColorModeSwitcher mr=\"2\" />\n        <Button leftIcon={<AddIcon />} colorScheme=\"accent\" onClick={onAddNote}>\n          Tarea\n        </Button>\n      </Box>\n    </Flex>\n  );\n};\n","import { Box } from \"@chakra-ui/react\";\n\nexport default function CalendarView() {\n  return (\n    <Box textAlign=\"center\" fontSize=\"xl\" pt=\"56px\">\n      TODO: Calendario\n    </Box>\n  );\n}\n","import { Dispatch, SetStateAction, useCallback, useState } from \"react\";\n\nexport const useInput = (\n  initialValue = \"\"\n): [string, (e: any) => void, Dispatch<SetStateAction<string>>] => {\n  const [value, setValue] = useState(initialValue);\n  const handleChange = useCallback((e) => setValue(e.target.value), []);\n  return [value, handleChange, setValue];\n};\n","import { useEffect, DependencyList, useReducer } from \"react\";\nimport { Table } from \"dexie\";\nimport db, { RickManagerDatabase } from \"../db\";\n\nexport enum TransactionState {\n  Idle = \"idle\",\n  Loading = \"loading\",\n  Error = \"error\",\n}\n\nenum ActionType {\n  Begin = \"begin\",\n  Commit = \"commit\",\n  Error = \"error\",\n}\n\ninterface IAction {\n  type: ActionType;\n  payload?: any;\n}\n\ninterface DBStore {\n  state: TransactionState;\n  error?: Error;\n}\n\nconst initialStore: DBStore = {\n  state: TransactionState.Idle,\n  error: undefined,\n};\n\nconst reducer = (store: DBStore, action: IAction): DBStore => {\n  switch (action.type) {\n    case ActionType.Begin:\n      return { ...store, state: TransactionState.Loading, error: undefined };\n    case ActionType.Commit:\n      return { ...store, state: TransactionState.Idle, error: undefined };\n    case ActionType.Error:\n      return { ...store, state: TransactionState.Error, error: action.payload };\n  }\n};\n\nexport function useDB(\n  cb: (db: RickManagerDatabase) => Promise<void>,\n  tables: Table[],\n  dependencies: DependencyList = []\n): [TransactionState, Error | undefined] {\n  const [store, dispatch] = useReducer(reducer, initialStore);\n  useEffect(() => {\n    db.transaction(\"r\", tables, async () => {\n      dispatch({ type: ActionType.Begin });\n      await cb(db);\n      dispatch({ type: ActionType.Commit });\n    }).catch((e) => {\n      dispatch({ type: ActionType.Error, payload: e });\n    });\n    // eslint-disable-next-line\n  }, dependencies);\n  return [store.state, store.error];\n}\n","import { RickManagerDatabase } from \"./db\";\nexport { RickManagerDatabase } from \"./db\";\nexport * from \"./models\";\n\nconst db = new RickManagerDatabase();\n\nexport default db;\n","import Dexie from \"dexie\";\nimport { ISubject } from \"./models\";\nimport { ITask } from './models/task';\n\nexport class RickManagerDatabase extends Dexie {\n  subjects: Dexie.Table<ISubject, number>;\n  tasks: Dexie.Table<ITask, number>;\n  //phones: Dexie.Table<IPhoneNumber, number>;\n\n  constructor() {\n    super(\"RickManagerDatabase\");\n\n    //\n    // Define tables and indexes\n    // (Here's where the implicit table props are dynamically created)\n    //\n    this.version(2).stores({\n      subjects: \"++id, name\",\n      tasks: '++id, subjectId, dueDate',\n      //phones: '++id, contactId, type, phone',\n    });\n\n    // The following lines are needed for it to work across typescipt using babel-preset-typescript:\n    this.subjects = this.table(\"subjects\");\n    this.tasks = this.table(\"tasks\");\n    //this.phones = this.table(\"phones\");\n  }\n}\n","import { useColorModeValue } from \"@chakra-ui/react\";\n\nexport function useHeaderPanel() {\n  const bg = useColorModeValue(\"primary.200\", \"primary.500\");\n  const color = useColorModeValue(\"gray.800\", \"white\");\n  return { bg, color };\n}\n","import { useColorModeValue } from \"@chakra-ui/react\";\n\nexport const useItemColor = (isActive: boolean): [string, string] => {\n  const bg = useColorModeValue(\n    !isActive ? \"white\" : \"gray.100\",\n    !isActive ? \"gray.700\" : \"gray.800\"\n  );\n  const hoverBg = useColorModeValue(\"gray.50\", \"gray.800\");\n  return [bg, hoverBg];\n};\n","import { Badge, Box, Heading } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useItemColor } from \"../../../hooks\";\n\nexport interface SubjectProps {\n  name: string;\n  color: string;\n  count?: number;\n  isActive?: boolean;\n  onClick: () => void;\n}\n\nexport const Subject: React.FC<SubjectProps> = ({\n  name,\n  color,\n  count = 0,\n  isActive = false,\n  onClick,\n}) => {\n  const [bg, hoverBg] = useItemColor(isActive);\n  return (\n    <Box\n      py={3}\n      borderBottomWidth=\"1px\"\n      bg={bg}\n      borderLeft={`8px solid ${color}`}\n      borderRadius=\"none\"\n      as=\"button\"\n      display=\"block\"\n      w=\"100%\"\n      onClick={onClick}\n      textAlign=\"left\"\n      whiteSpace=\"normal\"\n      _hover={{\n        bg: hoverBg,\n      }}\n    >\n      <Heading fontSize=\"lg\" px={2}>\n        {name}\n        {count > 0 && (\n          <Badge\n            colorScheme=\"accent\"\n            ml=\"1\"\n            borderRadius=\"full\"\n            py={1}\n            px={2}\n            float=\"right\"\n          >\n            {count}\n          </Badge>\n        )}\n      </Heading>\n    </Box>\n  );\n};\n","import { useState, useCallback, FC } from \"react\";\nimport { Box, Button, FormControl, FormLabel, Input } from \"@chakra-ui/react\";\nimport { CirclePicker, ColorResult } from \"react-color\";\nimport { useInput } from \"../../../hooks\";\nimport { ISubject } from \"../../../db/models\";\n\nexport interface AddSubjectProps {\n  onSubmit: (subject: ISubject) => void;\n}\n\nexport const AddSubject: FC<AddSubjectProps> = ({ onSubmit }) => {\n  const [name, setName] = useInput(\"\");\n  const [color, setColor] = useState<string>();\n  const handleColorChange = useCallback(\n    (newValue: ColorResult) => setColor(newValue.hex),\n    []\n  );\n  const handleSubmit = () => onSubmit({ name, color: color || \"white\" });\n  return (\n    <Box p={3} borderBottomWidth=\"1px\">\n      <FormControl id=\"form-name\" isRequired mb={3}>\n        <FormLabel>Nombre</FormLabel>\n        <Input\n          placeholder=\"Nombre de la materia\"\n          value={name}\n          onChange={setName}\n        />\n      </FormControl>\n      <FormLabel>Color</FormLabel>\n      <Box py={1} mb={4}>\n        <CirclePicker color={color} onChange={handleColorChange} width=\"100%\" />\n      </Box>\n      <Button\n        colorScheme=\"primary\"\n        type=\"button\"\n        disabled={!color || !name}\n        onClick={handleSubmit}\n      >\n        Agregar\n      </Button>\n    </Box>\n  );\n};\n","/*\nTaken from: https://github.com/mustaphaturhan/chakra-ui-markdown-renderer/blob/36eb69e3ddd989f16c80bc5e3d7a7548b4df80dc/src/index.tsx\n*/\n\nimport * as React from \"react\";\nimport {\n  Text,\n  Code,\n  Divider,\n  Link,\n  Checkbox,\n  ListItem,\n  Heading,\n  Image,\n  OrderedList,\n  UnorderedList,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n} from \"@chakra-ui/react\";\nimport deepmerge from \"deepmerge\";\nimport { Components } from \"react-markdown/src/ast-to-react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { tomorrow } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\ntype GetCoreProps = {\n  children?: React.ReactNode;\n  \"data-sourcepos\"?: any;\n};\n\nfunction getCoreProps(props: GetCoreProps): any {\n  return props[\"data-sourcepos\"]\n    ? { \"data-sourcepos\": props[\"data-sourcepos\"] }\n    : {};\n}\n\ninterface Defaults extends Components {\n  heading?: Components[\"h1\"];\n}\n\nexport const defaults: Defaults = {\n  p: (props) => {\n    const { children } = props;\n    return <Text mb={2}>{children}</Text>;\n  },\n  em: (props) => {\n    const { children } = props;\n    return <Text as=\"em\">{children}</Text>;\n  },\n  blockquote: (props) => {\n    const { children } = props;\n    return (\n      <Code as=\"blockquote\" p={2}>\n        {children}\n      </Code>\n    );\n  },\n  code: (props) => {\n    const { inline, children, className } = props;\n\n    if (inline) {\n      return <Code p={2} children={children} />;\n    }\n\n    const language = className?.replace(\"language-\", \"\");\n    return (\n      <SyntaxHighlighter style={tomorrow} language={language} showLineNumbers>\n        {children}\n      </SyntaxHighlighter>\n    );\n  },\n  del: (props) => {\n    const { children } = props;\n    return <Text as=\"del\">{children}</Text>;\n  },\n  hr: (props) => {\n    return <Divider />;\n  },\n  a: Link,\n  img: Image,\n  text: (props) => {\n    const { children } = props;\n    return <Text as=\"span\">{children}</Text>;\n  },\n  ul: (props) => {\n    const { ordered, children, depth } = props;\n    const attrs = getCoreProps(props);\n    let Element = UnorderedList;\n    let styleType = \"disc\";\n    if (ordered) {\n      Element = OrderedList;\n      styleType = \"decimal\";\n    }\n    if (depth === 1) styleType = \"circle\";\n    return (\n      <Element\n        spacing={2}\n        as={ordered ? \"ol\" : \"ul\"}\n        styleType={styleType}\n        pl={4}\n        {...attrs}\n      >\n        {children}\n      </Element>\n    );\n  },\n  ol: (props) => {\n    const { ordered, children, depth } = props;\n    const attrs = getCoreProps(props);\n    let Element = UnorderedList;\n    let styleType = \"disc\";\n    if (ordered) {\n      Element = OrderedList;\n      styleType = \"decimal\";\n    }\n    if (depth === 1) styleType = \"circle\";\n    return (\n      <Element\n        spacing={2}\n        as={ordered ? \"ol\" : \"ul\"}\n        styleType={styleType}\n        pl={4}\n        {...attrs}\n      >\n        {children}\n      </Element>\n    );\n  },\n  li: (props) => {\n    const { children, checked } = props;\n    let checkbox = null;\n    if (checked !== null && checked !== undefined) {\n      checkbox = (\n        <Checkbox isChecked={checked} isReadOnly>\n          {children}\n        </Checkbox>\n      );\n    }\n    return (\n      <ListItem\n        {...getCoreProps(props)}\n        listStyleType={checked !== null ? \"none\" : \"inherit\"}\n      >\n        {checkbox || children}\n      </ListItem>\n    );\n  },\n  heading: (props) => {\n    const { level, children } = props;\n    const sizes = [\"2xl\", \"xl\", \"lg\", \"md\", \"sm\", \"xs\"];\n    return (\n      <Heading\n        my={4}\n        as={`h${level}`}\n        size={sizes[`${level - 1}` as any]}\n        {...getCoreProps(props)}\n      >\n        {children}\n      </Heading>\n    );\n  },\n  pre: (props) => {\n    const { children } = props;\n    return <Code {...getCoreProps(props)}>{children}</Code>;\n  },\n  table: Table,\n  thead: Thead,\n  tbody: Tbody,\n  tr: Tr,\n  td: Td,\n  th: Th,\n};\n\nfunction ChakraUIRenderer(theme?: Defaults, merge = true): Components {\n  const elements = {\n    p: defaults.p,\n    em: defaults.em,\n    blockquote: defaults.blockquote,\n    code: defaults.code,\n    del: defaults.del,\n    hr: defaults.hr,\n    a: defaults.a,\n    img: defaults.img,\n    text: defaults.text,\n    ul: defaults.ul,\n    ol: defaults.ol,\n    li: defaults.li,\n    h1: defaults.heading,\n    h2: defaults.heading,\n    h3: defaults.heading,\n    h4: defaults.heading,\n    h5: defaults.heading,\n    h6: defaults.heading,\n    pre: defaults.pre,\n    table: defaults.table,\n    thead: defaults.thead,\n    tbody: defaults.tbody,\n    tr: defaults.tr,\n    td: defaults.td,\n    th: defaults.th,\n  };\n\n  if (theme && merge) {\n    return deepmerge(elements, theme);\n  }\n\n  return elements;\n}\n\nexport default ChakraUIRenderer;\n\nexport const chakraUIRenderer = ChakraUIRenderer();\n","import { Textarea, useColorModeValue } from \"@chakra-ui/react\";\nimport React, { ChangeEvent } from \"react\";\n\nexport interface ExpandableTextareaProps {\n  value: string;\n  onChange: (newValue: string) => void;\n  ref?: any;\n}\n\nconst MIN_HEIGHT = 16 * 10;\n\nexport const ExpandableTextarea: React.FC<ExpandableTextareaProps> =\n  React.forwardRef(({ value, onChange }, ref: any) => {\n    const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(e.target.value);\n    const handleInput = () => {\n      if (!ref?.current) return;\n      ref.current.style.height = \"\";\n      ref.current.style.height =\n        Math.max(ref.current.scrollHeight, MIN_HEIGHT) + 8 + \"px\";\n    };\n    const bg = useColorModeValue(\"gray.50\", \"gray.900\");\n    return (\n      <Textarea\n        placeholder=\"Comienza a escribir\"\n        ref={ref}\n        isRequired\n        focusBorderColor=\"none\"\n        rows={10}\n        onChange={handleChange}\n        value={value}\n        fontFamily=\"monospace\"\n        bgColor={bg}\n        onInput={handleInput}\n      />\n    );\n  });\n","import { Box, HStack } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from \"remark-gfm\";\nimport { chakraUIRenderer } from \"../../../lib\";\nimport { ExpandableTextarea } from \"../ExpandableTextarea\";\n\nexport interface TextareaPreviewProps {\n  value: string;\n  onChange: (newValue: string) => void;\n  ref?: any;\n}\n\nexport const TextareaPreview: React.FC<TextareaPreviewProps> = React.forwardRef(\n  ({ value, onChange }, ref: any) => {\n    return (\n      <HStack spacing={4} align=\"top\" mb={4}>\n        <Box flex=\"1\">\n          <ExpandableTextarea value={value} onChange={onChange} ref={ref} />\n        </Box>\n        <Box flex=\"1\">\n          <ReactMarkdown\n            plugins={[gfm]}\n            children={value}\n            components={chakraUIRenderer}\n          />\n        </Box>\n      </HStack>\n    );\n  }\n);\n","import { useField } from \"formik\";\nimport React from \"react\";\nimport { TextareaPreview } from \"../../TextareaPreview\";\n\nexport interface ContentInputProps {\n  ref?: any;\n}\n\nexport const ContentInput: React.FC<ContentInputProps> = React.forwardRef(\n  (_, ref) => {\n    const [field, , helpers] = useField(\"content\");\n    return (\n      <TextareaPreview\n        value={field.value}\n        onChange={helpers.setValue}\n        ref={ref}\n      />\n    );\n  }\n);\n","import { FormControl, FormLabel, Select } from \"@chakra-ui/react\";\nimport React, { ChangeEvent } from \"react\";\nimport { useField } from \"formik\";\nimport { useDB } from \"../../../../hooks\";\nimport db, { ISubject } from \"../../../../db\";\nimport { useState } from \"react\";\n\nexport interface SubjectSelectProps {}\n\nconst SubjectSelect: React.FC<SubjectSelectProps> = () => {\n  const [field, , helpers] = useField(\"subjectId\");\n  const [subjects, setSubjects] = useState<ISubject[]>([]);\n\n  useDB(\n    async (db) => {\n      const subjects = await db.subjects.orderBy(\"id\").toArray();\n      setSubjects(subjects);\n    },\n    [db.subjects],\n    []\n  );\n\n  const handleChange = (e: ChangeEvent<HTMLSelectElement>) =>\n    helpers.setValue(+e.target.value);\n\n  return (\n    <FormControl id=\"form-subject\" flex=\"1\">\n      <FormLabel>Materia</FormLabel>\n      <Select\n        placeholder=\"Selecciona la materia\"\n        required\n        {...field}\n        onChange={handleChange}\n      >\n        {subjects.map((subject) => (\n          <option value={subject.id} key={subject.id}>\n            {subject.name}\n          </option>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default SubjectSelect;\n","import { FormControl, FormLabel } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport ReactDatePicker from \"react-datepicker\";\nimport { useField } from \"formik\";\n\nexport interface DueDatePickerProps {}\n\nconst DueDatePicker: React.FC<DueDatePickerProps> = () => {\n  const [field, , helpers] = useField(\"dueDate\");\n  return (\n    <FormControl flex=\"1\">\n      <FormLabel htmlFor=\"form-due-date\">Fecha de entrega</FormLabel>\n      <ReactDatePicker\n        id=\"form-due-date\"\n        selected={field.value}\n        onChange={helpers.setValue as any}\n        showPopperArrow={true}\n        locale=\"es\"\n        showTimeSelect\n        timeFormat=\"p\"\n        timeIntervals={15}\n        dateFormat=\"Pp\"\n      />\n    </FormControl>\n  );\n};\n\nexport default DueDatePicker;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Button,\n  ModalProps,\n  Stack,\n} from \"@chakra-ui/react\";\nimport React, { useRef } from \"react\";\nimport { Form, Formik } from \"formik\";\nimport { ContentInput } from \"./ContentInput\";\nimport SubjectSelect from \"./SubjectSelect\";\nimport DueDatePicker from \"./DueDatePicker\";\nimport db, { ITask } from \"../../../db\";\n\ninterface TaskFormValues {\n  content: string;\n  dueDate: Date;\n  subjectId: number;\n}\n\nconst initialValues: TaskFormValues = {\n  content: \"\",\n  dueDate: new Date(),\n  subjectId: 0,\n};\n\nexport interface AddTaskProps extends Pick<ModalProps, \"onClose\" | \"isOpen\"> {\n  onTaskAdded: (newTask: ITask) => void;\n}\n\nexport const AddTask: React.FC<AddTaskProps> = ({\n  onClose,\n  isOpen,\n  onTaskAdded,\n}) => {\n  const initialRef = useRef<any>();\n  const handleSubmit = async (values: TaskFormValues) => {\n    await db.transaction(\"rw\", db.tasks, async () => {\n      const newTask = { ...values, createdAt: new Date(), finished: false };\n      const id = await db.tasks.add(newTask);\n      onTaskAdded({ id, ...newTask });\n    });\n  };\n  return (\n    <Modal\n      onClose={onClose}\n      size=\"xl\"\n      isOpen={isOpen}\n      closeOnOverlayClick={false}\n      initialFocusRef={initialRef}\n      scrollBehavior=\"outside\"\n    >\n      <ModalOverlay />\n      <ModalContent maxW=\"72rem\">\n        <ModalHeader>Nueva Tarea</ModalHeader>\n        <ModalCloseButton />\n        <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n          {() => (\n            <Form>\n              <ModalBody>\n                <ContentInput ref={initialRef} />\n                <Stack direction={[\"column\", \"row\"]} spacing={4}>\n                  <SubjectSelect />\n                  <DueDatePicker />\n                </Stack>\n              </ModalBody>\n              <ModalFooter>\n                <Button colorScheme=\"primary\" type=\"submit\">\n                  Guardar\n                </Button>\n              </ModalFooter>\n            </Form>\n          )}\n        </Formik>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import { Box, Text } from \"@chakra-ui/react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport es from \"date-fns/locale/es\";\nimport { CheckIcon, MinusIcon, TimeIcon } from \"@chakra-ui/icons\";\nimport { useItemColor } from \"../../../hooks\";\n\nexport interface TaskProps {\n  content: string;\n  dueDate: Date;\n  finished: boolean;\n  onClick: () => void;\n  isActive: boolean;\n}\n\nexport const Task: React.FC<TaskProps> = ({\n  content,\n  dueDate,\n  finished,\n  onClick,\n  isActive,\n}) => {\n  const [bg, hoverBg] = useItemColor(isActive);\n  return (\n    <Box\n      py={3}\n      borderBottomWidth=\"1px\"\n      bg={bg}\n      borderRadius=\"none\"\n      as=\"button\"\n      display=\"block\"\n      w=\"100%\"\n      p={4}\n      onClick={onClick}\n      textAlign=\"left\"\n      whiteSpace=\"normal\"\n      _hover={{\n        bg: hoverBg,\n      }}\n    >\n      <Box maxH=\"8rem\" overflow=\"hidden\" mb={2}>\n        <ReactMarkdown children={content} />\n      </Box>\n      <Text fontStyle=\"italic\" color=\"accent.400\" fontSize=\"sm\" mb={1}>\n        <TimeIcon /> Entrega{\" \"}\n        {formatDistanceToNow(dueDate, { locale: es, addSuffix: true })}\n      </Text>\n      <Text\n        fontStyle=\"italic\"\n        color={finished ? \"green.600\" : \"gray.600\"}\n        fontSize=\"sm\"\n      >\n        {finished ? <CheckIcon /> : <MinusIcon />}{\" \"}\n        {finished ? \"Finalizado\" : \"Pendiente\"}\n      </Text>\n    </Box>\n  );\n};\n","import { DeleteIcon } from \"@chakra-ui/icons\";\nimport {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  Button,\n  IconButton,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useCallback } from \"react\";\n\nexport interface DeleteButtonProps {\n  title: string;\n  text: string;\n  onClick: () => void;\n}\n\nconst DeleteButton: React.FC<DeleteButtonProps> = ({\n  title,\n  text,\n  onClick,\n}) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = React.useRef<any>();\n\n  const handleClick = useCallback(() => {\n    onClose();\n    onClick();\n  }, [onClose, onClick]);\n\n  return (\n    <>\n      <IconButton\n        aria-label=\"Delete task\"\n        icon={<DeleteIcon />}\n        colorScheme=\"red\"\n        variant=\"outline\"\n        onClick={onOpen}\n      />\n      <AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n              {title}\n            </AlertDialogHeader>\n\n            <AlertDialogBody>{text}</AlertDialogBody>\n\n            <AlertDialogFooter>\n              <Button ref={cancelRef} onClick={onClose}>\n                Cancelar\n              </Button>\n              <Button colorScheme=\"red\" onClick={handleClick} ml={3}>\n                Eliminar\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n    </>\n  );\n};\n\nexport default DeleteButton;\n","import { FC, useState } from \"react\";\nimport { AddIcon, RepeatIcon } from \"@chakra-ui/icons\";\nimport {\n  Box,\n  Flex,\n  Heading,\n  IconButton,\n  useDisclosure,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { Subject, AddSubject } from \"../../../components/UI\";\nimport db, { ISubject } from \"../../../db\";\nimport { useDB, TransactionState, useErrorEffect } from \"../../../hooks\";\nimport { useHeaderPanel } from \"../../../hooks/use-header-panel\";\n\nexport interface SubjectListProps {\n  selectedId?: number;\n  onSelect: (subject: ISubject) => void;\n}\n\nexport const SubjectList: FC<SubjectListProps> = ({ selectedId, onSelect }) => {\n  const [subjects, setSubjects] = useState<ISubject[]>([]);\n  const [reload, setReload] = useState(false);\n  const { isOpen, onToggle, onClose } = useDisclosure();\n  const { bg, color } = useHeaderPanel();\n  const toast = useToast();\n  const [dbState, error] = useDB(\n    async (db) => {\n      const subjects = await db.subjects.orderBy(\"id\").toArray();\n      for (const subject of subjects) {\n        subject.count = await db.tasks\n          .where(\"subjectId\")\n          .equals(subject.id!)\n          .and((subject) => subject.dueDate > new Date() && !subject.finished)\n          .count();\n      }\n      setSubjects(subjects);\n    },\n    [db.subjects, db.tasks],\n    [reload]\n  );\n  useErrorEffect(() => {\n    toast({\n      title: \"Ocurrió un error.\",\n      description: error?.message,\n      status: \"error\",\n      duration: 5000,\n      isClosable: true,\n    });\n  }, error);\n  const handleReloadClick = () => setReload((r) => !r);\n  const handleAddSubject = async (subject: ISubject) => {\n    await db.transaction(\"rw\", db.subjects, async () => {\n      const id = await db.subjects.add(subject);\n      setSubjects((subjects) => [...subjects, { id, ...subject }]);\n      onClose();\n    });\n  };\n\n  return (\n    <Box overflowY=\"scroll\" height=\"100%\">\n      <Flex\n        justify=\"space-between\"\n        p={3}\n        position=\"sticky\"\n        top=\"0\"\n        bg={bg}\n        color={color}\n        shadow=\"sm\"\n        zIndex=\"2\"\n        align=\"center\"\n      >\n        <Heading size=\"sm\">Materias</Heading>\n        <Box>\n          <IconButton\n            variant=\"solid\"\n            colorScheme=\"accent\"\n            size=\"sm\"\n            mr={2}\n            aria-label=\"Reload subjects\"\n            disabled={dbState === TransactionState.Loading}\n            onClick={handleReloadClick}\n            icon={<RepeatIcon />}\n          />\n          <IconButton\n            variant=\"solid\"\n            colorScheme=\"accent\"\n            aria-label=\"Add subject\"\n            size=\"sm\"\n            isActive={isOpen}\n            onClick={onToggle}\n            icon={<AddIcon />}\n          />\n        </Box>\n      </Flex>\n      {isOpen && <AddSubject onSubmit={handleAddSubject} />}\n      {subjects.map((subject) => (\n        <Subject\n          name={subject.name}\n          color={subject.color}\n          count={subject.count}\n          key={subject.id}\n          isActive={subject.id === selectedId}\n          onClick={() => onSelect(subject)}\n        />\n      ))}\n    </Box>\n  );\n};\n","import { useEffect, EffectCallback } from \"react\";\n\nexport function useErrorEffect(effect: EffectCallback, error: any) {\n  useEffect(() => {\n    if (!error) return;\n    return effect();\n    // eslint-disable-next-line\n  }, [error]);\n}\n","import { Box, Flex, Heading, Text } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useHeaderPanel, useDB } from \"../../../hooks\";\nimport db, { ISubject, ITask } from \"../../../db\";\nimport { useState, useEffect } from \"react\";\nimport { Task } from \"../../../components/UI\";\nimport { isFuture } from \"date-fns\";\n\nexport interface TaskListProps {\n  subject?: ISubject;\n  selectedTask?: ITask;\n  onSelect: (task: ITask) => void;\n}\n\nexport const TaskList: React.FC<TaskListProps> = ({\n  subject,\n  selectedTask,\n  onSelect,\n}) => {\n  const { bg, color } = useHeaderPanel();\n  const [tasks, setTasks] = useState<ITask[]>([]);\n  const [upcTasks, setUpcTasks] = useState<ITask[]>([]);\n  const [pastTasks, setPastTasks] = useState<ITask[]>([]);\n  useDB(\n    async (db) => {\n      if (!subject) return;\n      const tasks = await db.tasks\n        .where(\"subjectId\")\n        .equals(subject.id!)\n        .sortBy(\"dueDate\");\n      setTasks(tasks);\n    },\n    [db.tasks],\n    [subject]\n  );\n  useEffect(() => {\n    if (!selectedTask) return;\n    const index = tasks.indexOf(selectedTask);\n    if (index === -1) {\n      setTasks((tasks) =>\n        tasks.map((task) => (task.id === selectedTask.id ? selectedTask : task))\n      );\n    }\n    // eslint-disable-next-line\n  }, [selectedTask]);\n  useEffect(() => {\n    let upcTasks = [];\n    let pastTasks = [];\n    for (const task of tasks) {\n      if (isFuture(task.dueDate)) {\n        upcTasks.push(task);\n      } else {\n        pastTasks.push(task);\n      }\n    }\n    setUpcTasks(upcTasks);\n    setPastTasks(pastTasks);\n  }, [tasks]);\n  if (!subject) return <Text>Selecciona una materia</Text>;\n  return (\n    <Box overflowY=\"scroll\" height=\"100%\">\n      <Flex\n        justify=\"space-between\"\n        p={3}\n        position=\"sticky\"\n        top=\"0\"\n        bg={bg}\n        color={color}\n        shadow=\"sm\"\n        zIndex=\"2\"\n        align=\"center\"\n      >\n        <Heading size=\"sm\">Tareas de {subject.name}</Heading>\n      </Flex>\n      {upcTasks.map((task) => (\n        <Task\n          key={task.id}\n          content={task.content}\n          dueDate={task.dueDate}\n          finished={task.finished}\n          onClick={() => onSelect(task)}\n          isActive={selectedTask?.id === task.id}\n        />\n      ))}\n      {pastTasks.length > 0 && (\n        <Flex\n          justify=\"space-between\"\n          p={3}\n          position=\"sticky\"\n          top=\"0\"\n          bg={bg}\n          color={color}\n          shadow=\"sm\"\n          zIndex=\"2\"\n          align=\"center\"\n        >\n          <Heading size=\"sm\">Tareas pasadas</Heading>\n        </Flex>\n      )}\n      {pastTasks.map((task) => (\n        <Task\n          key={task.id}\n          content={task.content}\n          dueDate={task.dueDate}\n          finished={task.finished}\n          onClick={() => onSelect(task)}\n          isActive={selectedTask?.id === task.id}\n        />\n      ))}\n    </Box>\n  );\n};\n","import {\n  Text,\n  Box,\n  Checkbox,\n  HStack,\n  IconButton,\n  Icon,\n  FormControl,\n  FormLabel,\n} from \"@chakra-ui/react\";\nimport db, { ITask } from \"../../../db\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from \"remark-gfm\";\nimport { chakraUIRenderer } from \"../../../lib\";\nimport { format } from \"date-fns\";\nimport es from \"date-fns/locale/es\";\nimport { EditIcon } from \"@chakra-ui/icons\";\nimport { DeleteButton, ExpandableTextarea } from \"../../../components/UI\";\nimport { IoSaveOutline } from \"react-icons/io5\";\nimport React, { useState, useRef } from \"react\";\nimport ReactDatePicker from \"react-datepicker\";\n\nexport interface TaskViewProps {\n  task?: ITask;\n  onUpdate: (task: ITask) => void;\n  onDelete: (id: number) => void;\n}\n\nexport const TaskView: React.FC<TaskViewProps> = ({\n  task,\n  onUpdate,\n  onDelete,\n}) => {\n  const [isEdit, setIsEdit] = useState(false);\n  const [updatedContent, setUpdatedContent] = useState(\"\");\n  const [updatedDate, setUpdatedDate] = useState<Date>();\n  const textRef = useRef<any>();\n  const handleUpdate = async (props: Partial<ITask>) => {\n    await db.transaction(\"rw\", db.tasks, async () => {\n      await db.tasks.update(task!.id!, props);\n      onUpdate({ ...task, ...props } as ITask);\n    });\n  };\n  const handleCheckbox = (e: any) =>\n    handleUpdate({ finished: e.target.checked });\n  const handleDelete = async () => {\n    await db.transaction(\"rw\", db.tasks, async () => {\n      await db.tasks.delete(task!.id!);\n      onDelete(task!.id!);\n    });\n  };\n  const handleTurnEdit = () => {\n    setUpdatedContent(task!.content);\n    setUpdatedDate(task!.dueDate);\n    setIsEdit(true);\n  };\n  const handleCloseEdit = async () => {\n    await handleUpdate({ content: updatedContent, dueDate: updatedDate });\n    setIsEdit(false);\n  };\n  if (!task) return <Text>Selecciona una tarea</Text>;\n  return (\n    <Box p={6} overflowY=\"scroll\" height=\"100%\" position=\"relative\">\n      <HStack\n        position=\"absolute\"\n        top=\"1rem\"\n        right=\"1rem\"\n        spacing={2}\n        zIndex=\"2\"\n      >\n        <IconButton\n          aria-label=\"Turn edit mode\"\n          icon={isEdit ? <Icon as={IoSaveOutline} /> : <EditIcon />}\n          colorScheme={isEdit ? \"accent\" : \"primary\"}\n          variant=\"outline\"\n          onClick={isEdit ? handleCloseEdit : handleTurnEdit}\n        />\n        <DeleteButton\n          title=\"Eliminar tarea\"\n          text=\"¿Está seguro de querer eliminar la tarea? Esta acción no se puede deshacer.\"\n          onClick={handleDelete}\n        />\n      </HStack>\n      {isEdit ? (\n        <ExpandableTextarea\n          value={updatedContent}\n          onChange={setUpdatedContent}\n          ref={textRef}\n        />\n      ) : (\n        <ReactMarkdown\n          plugins={[gfm]}\n          children={task.content}\n          components={chakraUIRenderer}\n        />\n      )}\n      {isEdit ? (\n        <FormControl mt={4} mb={2}>\n          <FormLabel htmlFor=\"form-due-date\">Fecha de entrega</FormLabel>\n          <ReactDatePicker\n            id=\"form-due-date\"\n            selected={updatedDate}\n            onChange={setUpdatedDate as any}\n            showPopperArrow={true}\n            locale=\"es\"\n            showTimeSelect\n            timeFormat=\"p\"\n            timeIntervals={15}\n            dateFormat=\"Pp\"\n          />\n        </FormControl>\n      ) : (\n        <Text mt={4} mb={2}>\n          <strong>Fecha de entrega:</strong>{\" \"}\n          {format(task.dueDate, \"iiii Pp\", { locale: es })}\n        </Text>\n      )}\n      <Text mb={4}>\n        <strong>Anotado:</strong>{\" \"}\n        {format(task.createdAt, \"iiii Pp\", { locale: es })}\n      </Text>\n      <Checkbox\n        size=\"lg\"\n        colorScheme=\"green\"\n        isChecked={task.finished}\n        onChange={handleCheckbox}\n      >\n        Finalizado\n      </Checkbox>\n    </Box>\n  );\n};\n","import { Flex, Box } from \"@chakra-ui/react\";\nimport { SubjectList } from \"./SubjectList\";\nimport React, { useState, useEffect } from \"react\";\nimport { ISubject, ITask } from \"../../db\";\nimport { TaskList } from \"./TaskList\";\nimport { TaskView } from \"./TaskView\";\n\nexport interface ListViewProps {}\n\nexport const ListView: React.FC<ListViewProps> = () => {\n  const [selectedSubject, setSelectedSubject] = useState<ISubject>();\n  const [selectedTask, setSelectedTask] = useState<ITask>();\n\n  useEffect(() => {\n    setSelectedTask(undefined);\n  }, [selectedSubject]);\n\n  return (\n    <Flex h=\"100vh\" paddingTop=\"56px\">\n      <Box flex=\"2\">\n        <SubjectList\n          onSelect={setSelectedSubject}\n          selectedId={selectedSubject?.id}\n        />\n      </Box>\n      <Box flex=\"2\">\n        <TaskList\n          subject={selectedSubject}\n          onSelect={setSelectedTask}\n          selectedTask={selectedTask}\n        />\n      </Box>\n      <Box flex=\"5\">\n        <TaskView\n          task={selectedTask}\n          onUpdate={setSelectedTask}\n          onDelete={() =>\n            setSelectedSubject((subject) =>\n              subject ? { ...subject } : subject\n            )\n          }\n        />\n      </Box>\n    </Flex>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Toolbar } from \"../Navigation\";\nimport CalendarView from \"../../containers/CalendarView\";\nimport { ListView } from \"../../containers/ListView\";\nimport { ViewMode, VIEW_MODE_LS_KEY } from \"../../util/constants\";\nimport { useUpdateEffect } from \"../../hooks\";\nimport { AddTask } from \"../UI\";\nimport { useDisclosure } from \"@chakra-ui/react\";\n\nconst loadViewMode = (): ViewMode =>\n  (localStorage.getItem(VIEW_MODE_LS_KEY) as ViewMode) || ViewMode.List;\n\nexport const Layout: React.FC = () => {\n  const [viewMode, setViewMode] = useState<ViewMode>(loadViewMode);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [resetting, setResetting] = useState(false);\n\n  useUpdateEffect(() => {\n    localStorage.setItem(VIEW_MODE_LS_KEY, viewMode);\n  }, [viewMode]);\n\n  const handleTaskAdded = () => {\n    onClose();\n    setResetting(true);\n    setTimeout(() => {\n      setResetting(false);\n    }, 100);\n  };\n\n  return (\n    <>\n      <Toolbar\n        viewMode={viewMode}\n        onAddNote={onOpen}\n        onChangeViewMode={setViewMode}\n      />\n      {!resetting && viewMode === ViewMode.Calendar && <CalendarView />}\n      {!resetting && viewMode === ViewMode.List && <ListView />}\n      <AddTask\n        isOpen={isOpen}\n        onClose={onClose}\n        onTaskAdded={handleTaskAdded}\n      />\n    </>\n  );\n};\n","/**\n * A custom useEffect hook that only triggers on updates, not on initial mount\n * Idea stolen from: https://stackoverflow.com/a/55075818/1526448\n * @param {Function} effect\n * @param {Array<any>} dependencies\n */\nimport { DependencyList, EffectCallback, useEffect, useRef } from \"react\";\n\nexport function useUpdateEffect(\n  effect: EffectCallback,\n  dependencies: DependencyList = []\n) {\n  const isInitialMount = useRef(true);\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      effect();\n    }\n    // eslint-disable-next-line\n  }, dependencies);\n}\n","import { extendTheme } from \"@chakra-ui/react\";\nimport { mode } from \"@chakra-ui/theme-tools\";\n\nconst theme = extendTheme({\n  styles: {\n    global: (props) => ({\n      body: {\n        bg: mode(\"#f7f9f9\", \"#1e1e24\")(props),\n      },\n    }),\n  },\n  colors: {\n    primary: {\n      \"50\": \"#b8d0e0\",\n      \"100\": \"#aac7da\",\n      \"200\": \"#8eb5cd\",\n      \"300\": \"#71a2c1\",\n      \"400\": \"#5590b4\",\n      \"500\": \"#457b9d\",\n      \"600\": \"#386480\",\n      \"700\": \"#2c4e63\",\n      \"800\": \"#1f3847\",\n      \"900\": \"#13212b\",\n    },\n    accent: {\n      \"50\": \"#fee0d8\",\n      \"100\": \"#fdd0c4\",\n      \"200\": \"#fbb09d\",\n      \"300\": \"#fa9075\",\n      \"400\": \"#f9704e\",\n      \"500\": \"#f75026\",\n      \"600\": \"#ec3609\",\n      \"700\": \"#c52d07\",\n      \"800\": \"#9d2406\",\n      \"900\": \"#761b04\",\n    },\n  },\n});\n\nexport default theme;\n","import { ChakraProvider } from \"@chakra-ui/react\";\nimport { Layout } from \"./components/Layout\";\nimport theme from \"./theme\";\n\nexport const App = () => {\n  return (\n    <ChakraProvider theme={theme}>\n      <Layout />\n    </ChakraProvider>\n  );\n};\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport es from \"date-fns/locale/es\";\nimport { registerLocale } from \"react-datepicker\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/table.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./styles/date-picker.css\";\n\nregisterLocale(\"es\", es);\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}