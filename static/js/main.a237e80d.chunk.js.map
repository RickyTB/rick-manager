{"version":3,"sources":["db/db.ts","db/index.ts","db/models/index.ts","util/constants.ts","components/UI/ColorModeSwitcher/ColorModeSwitcher.tsx","components/Navigation/Toolbar/Toolbar.tsx","containers/CalendarView/CalendarView.tsx","components/UI/Subject/Subject.tsx","hooks/use-input.ts","hooks/use-db.ts","hooks/use-header-panel.ts","components/UI/AddSubject/AddSubject.tsx","lib/chakra-markdown-renderer.tsx","components/UI/ExpandableTextarea/ExpandableTextarea.tsx","components/UI/TextareaPreview/TextareaPreview.tsx","components/UI/AddTask/ContentInput/ContentInput.tsx","components/UI/AddTask/SubjectSelect/SubjectSelect.tsx","components/UI/AddTask/DueDatePicker/DueDatePicker.tsx","components/UI/AddTask/AddTask.tsx","components/UI/Task/Task.tsx","components/UI/DeleteButton/DeleteButton.tsx","containers/ListView/SubjectList/SubjectList.tsx","hooks/use-error-effect.ts","containers/ListView/TaskList/TaskList.tsx","containers/ListView/TaskView/TaskView.tsx","containers/ListView/ListView.tsx","components/Layout/Layout.tsx","hooks/use-update-effect.ts","theme/index.ts","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["RickManagerDatabase","subjects","tasks","version","stores","table","Dexie","db","ViewMode","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","VIEW_MODE_LS_KEY","Toolbar","viewMode","onChangeViewMode","onAddNote","bg","as","p","justify","position","top","left","right","zIndex","boxShadow","isAttached","colorScheme","isActive","Calendar","BsCalendarFill","List","BsListTask","mr","leftIcon","Add","CalendarView","textAlign","pt","Subject","name","count","py","borderBottomWidth","borderLeft","borderRadius","display","w","whiteSpace","_hover","px","ml","float","TransactionState","ActionType","initialStore","state","Idle","error","undefined","reducer","store","action","type","Begin","Loading","Commit","Error","payload","useDB","cb","tables","dependencies","useReducer","dispatch","useEffect","transaction","a","catch","e","useHeaderPanel","AddSubject","onSubmit","initialValue","useState","value","setValue","handleChange","useCallback","target","useInput","setName","setColor","handleColorChange","newValue","hex","id","isRequired","mb","placeholder","onChange","width","disabled","getCoreProps","defaults","paragraph","children","emphasis","blockquote","code","language","style","tomorrow","showLineNumbers","delete","thematicBreak","my","link","isExternal","img","Image","linkReference","Link","imageReference","list","start","ordered","depth","attrs","toString","styleType","spacing","pl","listItem","checked","checkbox","isChecked","isReadOnly","listStyleType","definition","heading","level","inlineCode","ChakraUIRenderer","theme","chakraUIRenderer","ExpandableTextarea","React","forwardRef","ref","focusBorderColor","rows","fontFamily","bgColor","onInput","current","height","Math","max","scrollHeight","TextareaPreview","align","flex","plugins","gfm","renderers","ContentInput","_","useField","field","helpers","SubjectSelect","setSubjects","orderBy","toArray","required","map","subject","DueDatePicker","htmlFor","selected","showPopperArrow","locale","showTimeSelect","timeFormat","timeIntervals","dateFormat","initialValues","content","dueDate","Date","subjectId","AddTask","onClose","isOpen","onTaskAdded","initialRef","useRef","handleSubmit","values","newTask","createdAt","finished","add","closeOnOverlayClick","initialFocusRef","scrollBehavior","maxW","direction","Task","maxH","overflow","fontStyle","Time","formatDistanceToNow","es","addSuffix","Check","Minus","DeleteButton","title","useDisclosure","onOpen","cancelRef","handleClick","Delete","leastDestructiveRef","fontWeight","SubjectList","selectedId","onSelect","reload","setReload","onToggle","toast","useToast","where","equals","and","dbState","effect","useErrorEffect","description","message","status","duration","isClosable","handleAddSubject","overflowY","shadow","r","Repeat","index","TaskList","selectedTask","setTasks","upcTasks","setUpcTasks","pastTasks","setPastTasks","sortBy","indexOf","task","isFuture","push","length","TaskView","onUpdate","onDelete","isEdit","setIsEdit","updatedContent","setUpdatedContent","updatedDate","setUpdatedDate","textRef","handleUpdate","update","handleDelete","handleCloseEdit","IoSaveOutline","Edit","mt","format","ListView","selectedSubject","setSelectedSubject","setSelectedTask","h","paddingTop","loadViewMode","localStorage","getItem","Layout","setViewMode","resetting","setResetting","isInitialMount","useUpdateEffect","setItem","setTimeout","extendTheme","styles","global","body","mode","colors","primary","accent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","registerLocale","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.a237e80d.chunk.js","sourcesContent":["import Dexie from \"dexie\";\r\nimport { ISubject } from \"./models\";\r\nimport { ITask } from './models/task';\r\n\r\nexport class RickManagerDatabase extends Dexie {\r\n  subjects: Dexie.Table<ISubject, number>;\r\n  tasks: Dexie.Table<ITask, number>;\r\n  //phones: Dexie.Table<IPhoneNumber, number>;\r\n\r\n  constructor() {\r\n    super(\"RickManagerDatabase\");\r\n\r\n    //\r\n    // Define tables and indexes\r\n    // (Here's where the implicit table props are dynamically created)\r\n    //\r\n    this.version(2).stores({\r\n      subjects: \"++id, name\",\r\n      tasks: '++id, subjectId, dueDate',\r\n      //phones: '++id, contactId, type, phone',\r\n    });\r\n\r\n    // The following lines are needed for it to work across typescipt using babel-preset-typescript:\r\n    this.subjects = this.table(\"subjects\");\r\n    this.tasks = this.table(\"tasks\");\r\n    //this.phones = this.table(\"phones\");\r\n  }\r\n}\r\n","import { RickManagerDatabase } from \"./db\";\r\nexport { RickManagerDatabase } from \"./db\";\r\nexport * from \"./models\";\r\n\r\nconst db = new RickManagerDatabase();\r\n\r\nexport default db;\r\n","export * from \"./subject\";\r\nexport * from \"./task\";\r\n","export enum ViewMode {\r\n  Calendar = \"calendar\",\r\n  List = \"list\",\r\n}\r\n\r\nexport const VIEW_MODE_LS_KEY = \"rick-manager-view-mode\";\r\n","import * as React from \"react\";\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">;\n\nconst ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue(\"dark\", \"light\");\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n\nexport default ColorModeSwitcher;\n","import { FC } from \"react\";\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Heading,\r\n  Button,\r\n  ButtonGroup,\r\n  IconButton,\r\n  Icon,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport { AddIcon } from \"@chakra-ui/icons\";\r\nimport { BsCalendarFill, BsListTask } from \"react-icons/bs\";\r\nimport ColorModeSwitcher from \"../../UI/ColorModeSwitcher\";\r\nimport { ViewMode } from \"../../../util/constants\";\r\n\r\ninterface ToolbarProps {\r\n  viewMode: ViewMode;\r\n  onChangeViewMode: (mode: ViewMode) => void;\r\n  onAddNote: () => void;\r\n}\r\n\r\nconst Toolbar: FC<ToolbarProps> = ({\r\n  viewMode,\r\n  onChangeViewMode,\r\n  onAddNote,\r\n}) => {\r\n  const bg = useColorModeValue(\"primary.500\", \"primary.300\");\r\n  const color = useColorModeValue(\"white\", \"gray.800\");\r\n  return (\r\n    <Flex\r\n      as=\"nav\"\r\n      p={2}\r\n      justify=\"space-between\"\r\n      bg={bg}\r\n      color={color}\r\n      position=\"fixed\"\r\n      top=\"0\"\r\n      left=\"0\"\r\n      right=\"0\"\r\n      zIndex=\"1\"\r\n      boxShadow=\"sm\"\r\n    >\r\n      <Box>\r\n        <ButtonGroup isAttached variant=\"solid\" colorScheme=\"accent\">\r\n          <IconButton\r\n            isActive={viewMode === ViewMode.Calendar}\r\n            aria-label=\"Show calendar\"\r\n            icon={<Icon as={BsCalendarFill} />}\r\n            onClick={() => onChangeViewMode(ViewMode.Calendar)}\r\n          />\r\n          <IconButton\r\n            isActive={viewMode === ViewMode.List}\r\n            aria-label=\"Show list\"\r\n            icon={<Icon as={BsListTask} />}\r\n            onClick={() => onChangeViewMode(ViewMode.List)}\r\n          />\r\n        </ButtonGroup>\r\n      </Box>\r\n      <Box p=\"2\">\r\n        <Heading size=\"md\">Rick Manager</Heading>\r\n      </Box>\r\n      <Box>\r\n        <ColorModeSwitcher mr=\"2\" />\r\n        <Button leftIcon={<AddIcon />} colorScheme=\"accent\" onClick={onAddNote}>\r\n          Tarea\r\n        </Button>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Toolbar;\r\n","import { Box } from \"@chakra-ui/react\";\r\n\r\nexport default function CalendarView() {\r\n  return (\r\n    <Box textAlign=\"center\" fontSize=\"xl\" pt=\"56px\">\r\n      TODO: Calendario\r\n    </Box>\r\n  );\r\n}\r\n","import { Badge, Box, Heading } from \"@chakra-ui/react\";\r\nimport React, { FC } from \"react\";\r\n\r\ninterface SubjectProps {\r\n  name: string;\r\n  color: string;\r\n  count?: number;\r\n  isActive?: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nconst Subject: FC<SubjectProps> = ({\r\n  name,\r\n  color,\r\n  count = 0,\r\n  isActive = false,\r\n  onClick,\r\n}) => {\r\n  const bg = !isActive ? \"white\" : \"gray.100\";\r\n  return (\r\n    <Box\r\n      py={3}\r\n      borderBottomWidth=\"1px\"\r\n      bg={bg}\r\n      borderLeft={`8px solid ${color}`}\r\n      borderRadius=\"none\"\r\n      as=\"button\"\r\n      display=\"block\"\r\n      w=\"100%\"\r\n      onClick={onClick}\r\n      textAlign=\"left\"\r\n      whiteSpace=\"normal\"\r\n      _hover={{\r\n        bg: \"gray.50\",\r\n      }}\r\n    >\r\n      <Heading fontSize=\"lg\" px={2}>\r\n        {name}\r\n        {count > 0 && (\r\n          <Badge\r\n            colorScheme=\"accent\"\r\n            ml=\"1\"\r\n            borderRadius=\"full\"\r\n            py={1}\r\n            px={2}\r\n            float=\"right\"\r\n          >\r\n            {count}\r\n          </Badge>\r\n        )}\r\n      </Heading>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Subject;\r\n","import { Dispatch, SetStateAction, useCallback, useState } from \"react\";\r\n\r\nexport const useInput = (\r\n  initialValue = \"\"\r\n): [string, (e: any) => void, Dispatch<SetStateAction<string>>] => {\r\n  const [value, setValue] = useState(initialValue);\r\n  const handleChange = useCallback((e) => setValue(e.target.value), []);\r\n  return [value, handleChange, setValue];\r\n};\r\n","import { useEffect, DependencyList, useReducer } from \"react\";\r\nimport { Table } from \"dexie\";\r\nimport db, { RickManagerDatabase } from \"../db\";\r\n\r\nexport enum TransactionState {\r\n  Idle = \"idle\",\r\n  Loading = \"loading\",\r\n  Error = \"error\",\r\n}\r\n\r\nenum ActionType {\r\n  Begin = \"begin\",\r\n  Commit = \"commit\",\r\n  Error = \"error\",\r\n}\r\n\r\ninterface IAction {\r\n  type: ActionType;\r\n  payload?: any;\r\n}\r\n\r\ninterface DBStore {\r\n  state: TransactionState;\r\n  error?: Error;\r\n}\r\n\r\nconst initialStore: DBStore = {\r\n  state: TransactionState.Idle,\r\n  error: undefined,\r\n};\r\n\r\nconst reducer = (store: DBStore, action: IAction): DBStore => {\r\n  switch (action.type) {\r\n    case ActionType.Begin:\r\n      return { ...store, state: TransactionState.Loading, error: undefined };\r\n    case ActionType.Commit:\r\n      return { ...store, state: TransactionState.Idle, error: undefined };\r\n    case ActionType.Error:\r\n      return { ...store, state: TransactionState.Error, error: action.payload };\r\n  }\r\n};\r\n\r\nexport function useDB(\r\n  cb: (db: RickManagerDatabase) => Promise<void>,\r\n  tables: Table[],\r\n  dependencies: DependencyList = []\r\n): [TransactionState, Error | undefined] {\r\n  const [store, dispatch] = useReducer(reducer, initialStore);\r\n  useEffect(() => {\r\n    db.transaction(\"r\", tables, async () => {\r\n      dispatch({ type: ActionType.Begin });\r\n      await cb(db);\r\n      dispatch({ type: ActionType.Commit });\r\n    }).catch((e) => {\r\n      dispatch({ type: ActionType.Error, payload: e });\r\n    });\r\n    // eslint-disable-next-line\r\n  }, dependencies);\r\n  return [store.state, store.error];\r\n}\r\n","import { useColorModeValue } from \"@chakra-ui/react\";\r\n\r\nexport function useHeaderPanel() {\r\n  const bg = useColorModeValue(\"primary.200\", \"primary.500\");\r\n  const color = useColorModeValue(\"gray.800\", \"white\");\r\n  return { bg, color };\r\n}\r\n","import { useState, useCallback, FC } from \"react\";\r\nimport { Box, Button, FormControl, FormLabel, Input } from \"@chakra-ui/react\";\r\nimport { CirclePicker, ColorResult } from \"react-color\";\r\nimport { useInput } from \"../../../hooks\";\r\nimport { ISubject } from \"../../../db/models\";\r\n\r\ninterface AddSubjectProps {\r\n  onSubmit: (subject: ISubject) => void;\r\n}\r\n\r\nconst AddSubject: FC<AddSubjectProps> = ({ onSubmit }) => {\r\n  const [name, setName] = useInput(\"\");\r\n  const [color, setColor] = useState<string>();\r\n  const handleColorChange = useCallback(\r\n    (newValue: ColorResult) => setColor(newValue.hex),\r\n    []\r\n  );\r\n  const handleSubmit = () => onSubmit({ name, color: color || \"white\" });\r\n  return (\r\n    <Box bg=\"white\" p={3} borderBottomWidth=\"1px\">\r\n      <FormControl id=\"form-name\" isRequired mb={3}>\r\n        <FormLabel>Nombre</FormLabel>\r\n        <Input\r\n          placeholder=\"Nombre de la materia\"\r\n          value={name}\r\n          onChange={setName}\r\n        />\r\n      </FormControl>\r\n      <FormLabel>Color</FormLabel>\r\n      <Box py={1} mb={4}>\r\n        <CirclePicker color={color} onChange={handleColorChange} width=\"100%\" />\r\n      </Box>\r\n      <Button\r\n        colorScheme=\"primary\"\r\n        type=\"button\"\r\n        disabled={!color || !name}\r\n        onClick={handleSubmit}\r\n      >\r\n        Agregar\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AddSubject;\r\n","/*\r\nTaken from: https://github.com/mustaphaturhan/chakra-ui-markdown-renderer/blob/53b6d2c1ff68effa870888855910235ec4ec4611/src/index.js\r\n*/\r\n\r\nimport React, { ElementType } from \"react\";\r\nimport {\r\n  Text,\r\n  Code,\r\n  Divider,\r\n  Link,\r\n  List,\r\n  Checkbox,\r\n  ListItem,\r\n  Heading,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport { tomorrow } from \"react-syntax-highlighter/dist/esm/styles/prism\";\r\n\r\nfunction getCoreProps(props: any): any {\r\n  return props[\"data-sourcepos\"]\r\n    ? { \"data-sourcepos\": props[\"data-sourcepos\"] }\r\n    : {};\r\n}\r\n\r\nexport const defaults: { [nodeType: string]: ElementType } = {\r\n  paragraph: (props) => {\r\n    const { children } = props;\r\n    return <Text mb={2}>{children}</Text>;\r\n  },\r\n  emphasis: (props) => {\r\n    const { children } = props;\r\n    return <Text as=\"em\">{children}</Text>;\r\n  },\r\n  blockquote: (props) => {\r\n    const { children } = props;\r\n    return <Code p={2}>{children}</Code>;\r\n  },\r\n  code: ({ language, value }) =>\r\n    value ? (\r\n      <SyntaxHighlighter style={tomorrow} language={language} showLineNumbers>\r\n        {value}\r\n      </SyntaxHighlighter>\r\n    ) : null,\r\n  delete: (props) => {\r\n    const { children } = props;\r\n    return <Text as=\"del\">{children}</Text>;\r\n  },\r\n  thematicBreak: (props) => <Divider my={4} {...props}/>,\r\n  link: (props) => <Link {...props} color=\"primary.500\" isExternal/>,\r\n  img: Image,\r\n  linkReference: Link,\r\n  imageReference: Image,\r\n  text: (props) => {\r\n    const { children } = props;\r\n    return (\r\n      <Text as=\"span\" mb={4}>\r\n        {children}\r\n      </Text>\r\n    );\r\n  },\r\n  list: (props) => {\r\n    const { start, ordered, children, depth } = props;\r\n    const attrs = getCoreProps(props);\r\n    if (start !== null && start !== 1 && start !== undefined) {\r\n      attrs.start = start.toString();\r\n    }\r\n    let styleType = \"disc\";\r\n    if (ordered) styleType = \"decimal\";\r\n    if (depth === 1) styleType = \"circle\";\r\n    return (\r\n      <List\r\n        spacing={1}\r\n        as={ordered ? \"ol\" : \"ul\"}\r\n        styleType={styleType}\r\n        pl={4}\r\n        mb={4}\r\n        {...attrs}\r\n      >\r\n        {children}\r\n      </List>\r\n    );\r\n  },\r\n  listItem: (props) => {\r\n    const { children, checked } = props;\r\n    let checkbox = null;\r\n    if (checked !== null && checked !== undefined) {\r\n      checkbox = (\r\n        <Checkbox isChecked={checked} isReadOnly>\r\n          {children}\r\n        </Checkbox>\r\n      );\r\n    }\r\n    return (\r\n      <ListItem\r\n        {...getCoreProps(props)}\r\n        listStyleType={checked !== null ? \"none\" : \"inherit\"}\r\n      >\r\n        {checkbox || children}\r\n      </ListItem>\r\n    );\r\n  },\r\n  definition: () => null,\r\n  heading: (props) => {\r\n    const { level, children } = props;\r\n    const sizes = [\"2xl\", \"xl\", \"lg\", \"md\", \"sm\", \"xs\"];\r\n    return (\r\n      <Heading\r\n        mb={4}\r\n        as={`h${level}` as any}\r\n        size={sizes[`${level - 1}` as any] as any}\r\n        {...getCoreProps(props)}\r\n      >\r\n        {children}\r\n      </Heading>\r\n    );\r\n  },\r\n  inlineCode: (props) => {\r\n    const { children } = props;\r\n    return <Code {...getCoreProps(props)}>{children}</Code>;\r\n  },\r\n};\r\n\r\nfunction ChakraUIRenderer(theme = defaults) {\r\n  return {\r\n    paragraph: theme.paragraph,\r\n    emphasis: theme.emphasis,\r\n    blockquote: theme.blockquote,\r\n    code: theme.code,\r\n    delete: theme.delete,\r\n    thematicBreak: theme.thematicBreak,\r\n    link: theme.link,\r\n    img: theme.img,\r\n    linkReference: theme.linkReference,\r\n    imageReference: theme.imageReference,\r\n    text: theme.text,\r\n    list: theme.list,\r\n    listItem: theme.listItem,\r\n    definition: theme.definition,\r\n    heading: theme.heading,\r\n    inlineCode: theme.inlineCode,\r\n  };\r\n}\r\n\r\nexport default ChakraUIRenderer;\r\n\r\nexport const chakraUIRenderer = ChakraUIRenderer();\r\n","import { Textarea } from \"@chakra-ui/react\";\r\nimport React, { ChangeEvent } from \"react\";\r\n\r\nexport interface ExpandableTextareaProps {\r\n  value: string;\r\n  onChange: (newValue: string) => void;\r\n  ref?: any;\r\n}\r\n\r\nconst MIN_HEIGHT = 16 * 10;\r\n\r\nconst ExpandableTextarea: React.FC<ExpandableTextareaProps> = React.forwardRef(\r\n  ({ value, onChange }, ref: any) => {\r\n    const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) =>\r\n      onChange(e.target.value);\r\n    const handleInput = () => {\r\n      if (!ref?.current) return;\r\n      ref.current.style.height = \"\";\r\n      ref.current.style.height =\r\n        Math.max(ref.current.scrollHeight, MIN_HEIGHT) + 8 + \"px\";\r\n    };\r\n    return (\r\n      <Textarea\r\n        placeholder=\"Comienza a escribir\"\r\n        ref={ref}\r\n        isRequired\r\n        focusBorderColor=\"none\"\r\n        rows={10}\r\n        onChange={handleChange}\r\n        value={value}\r\n        fontFamily=\"monospace\"\r\n        bgColor=\"gray.50\"\r\n        onInput={handleInput}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nexport default ExpandableTextarea;\r\n","import { Box, HStack } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport gfm from \"remark-gfm\";\r\nimport { chakraUIRenderer } from \"../../../lib/chakra-markdown-renderer\";\r\nimport ExpandableTextarea from \"../ExpandableTextarea\";\r\n\r\nexport interface TextareaPreviewProps {\r\n  value: string;\r\n  onChange: (newValue: string) => void;\r\n  ref?: any;\r\n}\r\n\r\nconst TextareaPreview: React.FC<TextareaPreviewProps> = React.forwardRef(\r\n  ({ value, onChange }, ref: any) => {\r\n    return (\r\n      <HStack spacing={4} align=\"top\" mb={4}>\r\n        <Box flex=\"1\">\r\n          <ExpandableTextarea value={value} onChange={onChange} ref={ref} />\r\n        </Box>\r\n        <Box flex=\"1\">\r\n          <ReactMarkdown\r\n            plugins={[gfm]}\r\n            children={value}\r\n            renderers={chakraUIRenderer}\r\n          />\r\n        </Box>\r\n      </HStack>\r\n    );\r\n  }\r\n);\r\n\r\nexport default TextareaPreview;\r\n","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport TextareaPreview from \"../../TextareaPreview\";\r\n\r\nexport interface ContentInputProps {\r\n  ref?: any;\r\n}\r\n\r\nconst ContentInput: React.FC<ContentInputProps> = React.forwardRef((_, ref) => {\r\n  const [field, , helpers] = useField(\"content\");\r\n  return (\r\n    <TextareaPreview\r\n      value={field.value}\r\n      onChange={helpers.setValue}\r\n      ref={ref}\r\n    />\r\n  );\r\n});\r\n\r\nexport default ContentInput;\r\n","import { FormControl, FormLabel, Select } from \"@chakra-ui/react\";\r\nimport React, { ChangeEvent } from \"react\";\r\nimport { useField } from \"formik\";\r\nimport { useDB } from \"../../../../hooks\";\r\nimport db, { ISubject } from \"../../../../db\";\r\nimport { useState } from \"react\";\r\n\r\nexport interface SubjectSelectProps {}\r\n\r\nconst SubjectSelect: React.FC<SubjectSelectProps> = () => {\r\n  const [field, , helpers] = useField(\"subjectId\");\r\n  const [subjects, setSubjects] = useState<ISubject[]>([]);\r\n\r\n  useDB(\r\n    async (db) => {\r\n      const subjects = await db.subjects.orderBy(\"id\").toArray();\r\n      setSubjects(subjects);\r\n    },\r\n    [db.subjects],\r\n    []\r\n  );\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLSelectElement>) =>\r\n    helpers.setValue(+e.target.value);\r\n\r\n  return (\r\n    <FormControl id=\"form-subject\" flex=\"1\">\r\n      <FormLabel>Materia</FormLabel>\r\n      <Select\r\n        placeholder=\"Selecciona la materia\"\r\n        required\r\n        {...field}\r\n        onChange={handleChange}\r\n      >\r\n        {subjects.map((subject) => (\r\n          <option value={subject.id} key={subject.id}>\r\n            {subject.name}\r\n          </option>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default SubjectSelect;\r\n","import { FormControl, FormLabel } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport ReactDatePicker from \"react-datepicker\";\r\nimport { useField } from \"formik\";\r\n\r\nexport interface DueDatePickerProps {}\r\n\r\nconst DueDatePicker: React.FC<DueDatePickerProps> = () => {\r\n  const [field, , helpers] = useField(\"dueDate\");\r\n  return (\r\n    <FormControl flex=\"1\">\r\n      <FormLabel htmlFor=\"form-due-date\">Fecha de entrega</FormLabel>\r\n      <ReactDatePicker\r\n        id=\"form-due-date\"\r\n        selected={field.value}\r\n        onChange={helpers.setValue as any}\r\n        showPopperArrow={true}\r\n        locale=\"es\"\r\n        showTimeSelect\r\n        timeFormat=\"p\"\r\n        timeIntervals={15}\r\n        dateFormat=\"Pp\"\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default DueDatePicker;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalCloseButton,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  ModalProps,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\nimport React, { FC, useRef } from \"react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport ContentInput from \"./ContentInput\";\r\nimport SubjectSelect from \"./SubjectSelect\";\r\nimport DueDatePicker from \"./DueDatePicker\";\r\nimport db, { ITask } from \"../../../db\";\r\n\r\ninterface TaskFormValues {\r\n  content: string;\r\n  dueDate: Date;\r\n  subjectId: number;\r\n}\r\n\r\nconst initialValues: TaskFormValues = {\r\n  content: \"\",\r\n  dueDate: new Date(),\r\n  subjectId: 0,\r\n};\r\n\r\nexport interface AddTaskProps extends Pick<ModalProps, \"onClose\" | \"isOpen\"> {\r\n  onTaskAdded: (newTask: ITask) => void;\r\n}\r\n\r\nconst AddTask: FC<AddTaskProps> = ({ onClose, isOpen, onTaskAdded }) => {\r\n  const initialRef = useRef<any>();\r\n  const handleSubmit = async (values: TaskFormValues) => {\r\n    await db.transaction(\"rw\", db.tasks, async () => {\r\n      const newTask = { ...values, createdAt: new Date(), finished: false };\r\n      const id = await db.tasks.add(newTask);\r\n      onTaskAdded({ id, ...newTask });\r\n    });\r\n  };\r\n  return (\r\n    <Modal\r\n      onClose={onClose}\r\n      size=\"xl\"\r\n      isOpen={isOpen}\r\n      closeOnOverlayClick={false}\r\n      initialFocusRef={initialRef}\r\n      scrollBehavior=\"outside\"\r\n    >\r\n      <ModalOverlay />\r\n      <ModalContent maxW=\"72rem\">\r\n        <ModalHeader>Nueva Tarea</ModalHeader>\r\n        <ModalCloseButton />\r\n        <Formik initialValues={initialValues} onSubmit={handleSubmit}>\r\n          {() => (\r\n            <Form>\r\n              <ModalBody>\r\n                <ContentInput ref={initialRef} />\r\n                <Stack direction={[\"column\", \"row\"]} spacing={4}>\r\n                  <SubjectSelect />\r\n                  <DueDatePicker />\r\n                </Stack>\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <Button colorScheme=\"primary\" type=\"submit\">\r\n                  Guardar\r\n                </Button>\r\n              </ModalFooter>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddTask;\r\n","import { Box, Text } from \"@chakra-ui/react\";\r\nimport { formatDistanceToNow } from \"date-fns\";\r\nimport React from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport es from \"date-fns/locale/es\";\r\nimport { CheckIcon, MinusIcon, TimeIcon } from \"@chakra-ui/icons\";\r\n\r\nexport interface TaskProps {\r\n  content: string;\r\n  dueDate: Date;\r\n  finished: boolean;\r\n  onClick: () => void;\r\n  isActive: boolean;\r\n}\r\n\r\nconst Task: React.FC<TaskProps> = ({\r\n  content,\r\n  dueDate,\r\n  finished,\r\n  onClick,\r\n  isActive,\r\n}) => {\r\n  const bg = !isActive ? \"white\" : \"gray.100\";\r\n  return (\r\n    <Box\r\n      py={3}\r\n      borderBottomWidth=\"1px\"\r\n      bg={bg}\r\n      borderRadius=\"none\"\r\n      as=\"button\"\r\n      display=\"block\"\r\n      w=\"100%\"\r\n      p={4}\r\n      onClick={onClick}\r\n      textAlign=\"left\"\r\n      whiteSpace=\"normal\"\r\n      _hover={{\r\n        bg: !isActive ? \"gray.100\" : \"gray.200\",\r\n      }}\r\n    >\r\n      <Box maxH=\"8rem\" overflow=\"hidden\" mb={2}>\r\n        <ReactMarkdown children={content} />\r\n      </Box>\r\n      <Text fontStyle=\"italic\" color=\"accent.400\" fontSize=\"sm\" mb={1}>\r\n        <TimeIcon /> Entrega{\" \"}\r\n        {formatDistanceToNow(dueDate, { locale: es, addSuffix: true })}\r\n      </Text>\r\n      <Text\r\n        fontStyle=\"italic\"\r\n        color={finished ? \"green.600\" : \"gray.600\"}\r\n        fontSize=\"sm\"\r\n      >\r\n        {finished ? <CheckIcon /> : <MinusIcon />}{\" \"}\r\n        {finished ? \"Finalizado\" : \"Pendiente\"}\r\n      </Text>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import { DeleteIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n  Button,\r\n  IconButton,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { useCallback } from \"react\";\r\n\r\nexport interface DeleteButtonProps {\r\n  title: string;\r\n  text: string;\r\n  onClick: () => void;\r\n}\r\n\r\nconst DeleteButton: React.FC<DeleteButtonProps> = ({\r\n  title,\r\n  text,\r\n  onClick,\r\n}) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const cancelRef = React.useRef<any>();\r\n\r\n  const handleClick = useCallback(() => {\r\n    onClose();\r\n    onClick();\r\n  }, [onClose, onClick]);\r\n\r\n  return (\r\n    <>\r\n      <IconButton\r\n        aria-label=\"Delete task\"\r\n        icon={<DeleteIcon />}\r\n        colorScheme=\"red\"\r\n        variant=\"outline\"\r\n        onClick={onOpen}\r\n      />\r\n      <AlertDialog\r\n        isOpen={isOpen}\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n      >\r\n        <AlertDialogOverlay>\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              {title}\r\n            </AlertDialogHeader>\r\n\r\n            <AlertDialogBody>{text}</AlertDialogBody>\r\n\r\n            <AlertDialogFooter>\r\n              <Button ref={cancelRef} onClick={onClose}>\r\n                Cancelar\r\n              </Button>\r\n              <Button colorScheme=\"red\" onClick={handleClick} ml={3}>\r\n                Eliminar\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeleteButton;\r\n","import { FC, useState } from \"react\";\r\nimport { AddIcon, RepeatIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  useDisclosure,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { Subject, AddSubject } from \"../../../components/UI\";\r\nimport db, { ISubject } from \"../../../db\";\r\nimport { useDB, TransactionState, useErrorEffect } from \"../../../hooks\";\r\nimport { useHeaderPanel } from \"../../../hooks/use-header-panel\";\r\n\r\ninterface SubjectListProps {\r\n  selectedId?: number;\r\n  onSelect: (subject: ISubject) => void;\r\n}\r\n\r\nconst SubjectList: FC<SubjectListProps> = ({ selectedId, onSelect }) => {\r\n  const [subjects, setSubjects] = useState<ISubject[]>([]);\r\n  const [reload, setReload] = useState(false);\r\n  const { isOpen, onToggle, onClose } = useDisclosure();\r\n  const { bg, color } = useHeaderPanel();\r\n  const toast = useToast();\r\n  const [dbState, error] = useDB(\r\n    async (db) => {\r\n      const subjects = await db.subjects.orderBy(\"id\").toArray();\r\n      for (const subject of subjects) {\r\n        subject.count = await db.tasks\r\n          .where(\"subjectId\")\r\n          .equals(subject.id!)\r\n          .and((subject) => subject.dueDate > new Date() && !subject.finished)\r\n          .count();\r\n      }\r\n      setSubjects(subjects);\r\n    },\r\n    [db.subjects, db.tasks],\r\n    [reload]\r\n  );\r\n  useErrorEffect(() => {\r\n    toast({\r\n      title: \"Ocurrió un error.\",\r\n      description: error?.message,\r\n      status: \"error\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n    });\r\n  }, error);\r\n  const handleReloadClick = () => setReload((r) => !r);\r\n  const handleAddSubject = async (subject: ISubject) => {\r\n    await db.transaction(\"rw\", db.subjects, async () => {\r\n      const id = await db.subjects.add(subject);\r\n      setSubjects((subjects) => [...subjects, { id, ...subject }]);\r\n      onClose();\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Box overflowY=\"scroll\" height=\"100%\">\r\n      <Flex\r\n        justify=\"space-between\"\r\n        p={3}\r\n        position=\"sticky\"\r\n        top=\"0\"\r\n        bg={bg}\r\n        color={color}\r\n        shadow=\"sm\"\r\n        zIndex=\"2\"\r\n        align=\"center\"\r\n      >\r\n        <Heading size=\"sm\">Materias</Heading>\r\n        <Box>\r\n          <IconButton\r\n            variant=\"solid\"\r\n            colorScheme=\"accent\"\r\n            size=\"sm\"\r\n            mr={2}\r\n            aria-label=\"Reload subjects\"\r\n            disabled={dbState === TransactionState.Loading}\r\n            onClick={handleReloadClick}\r\n            icon={<RepeatIcon />}\r\n          />\r\n          <IconButton\r\n            variant=\"solid\"\r\n            colorScheme=\"accent\"\r\n            aria-label=\"Add subject\"\r\n            size=\"sm\"\r\n            isActive={isOpen}\r\n            onClick={onToggle}\r\n            icon={<AddIcon />}\r\n          />\r\n        </Box>\r\n      </Flex>\r\n      {isOpen && <AddSubject onSubmit={handleAddSubject} />}\r\n      {subjects.map((subject, index) => (\r\n        <Subject\r\n          name={subject.name}\r\n          color={subject.color}\r\n          count={subject.count}\r\n          key={subject.id}\r\n          isActive={subject.id === selectedId}\r\n          onClick={() => onSelect(subject)}\r\n        />\r\n      ))}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default SubjectList;\r\n","import { useEffect, EffectCallback } from \"react\";\r\n\r\nexport function useErrorEffect(effect: EffectCallback, error: any) {\r\n  useEffect(() => {\r\n    if (!error) return;\r\n    return effect();\r\n    // eslint-disable-next-line\r\n  }, [error]);\r\n}\r\n","import { Box, Flex, Heading, Text } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { useHeaderPanel, useDB } from \"../../../hooks\";\r\nimport db, { ISubject, ITask } from \"../../../db\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Task } from \"../../../components/UI\";\r\nimport { isFuture } from \"date-fns\";\r\n\r\nexport interface TaskListProps {\r\n  subject?: ISubject;\r\n  selectedTask?: ITask;\r\n  onSelect: (task: ITask) => void;\r\n}\r\n\r\nconst TaskList: React.FC<TaskListProps> = ({\r\n  subject,\r\n  selectedTask,\r\n  onSelect,\r\n}) => {\r\n  const { bg, color } = useHeaderPanel();\r\n  const [tasks, setTasks] = useState<ITask[]>([]);\r\n  const [upcTasks, setUpcTasks] = useState<ITask[]>([]);\r\n  const [pastTasks, setPastTasks] = useState<ITask[]>([]);\r\n  useDB(\r\n    async (db) => {\r\n      if (!subject) return;\r\n      const tasks = await db.tasks\r\n        .where(\"subjectId\")\r\n        .equals(subject.id!)\r\n        .sortBy(\"dueDate\");\r\n      setTasks(tasks);\r\n    },\r\n    [db.tasks],\r\n    [subject]\r\n  );\r\n  useEffect(() => {\r\n    if (!selectedTask) return;\r\n    const index = tasks.indexOf(selectedTask);\r\n    if (index === -1) {\r\n      setTasks((tasks) =>\r\n        tasks.map((task) => (task.id === selectedTask.id ? selectedTask : task))\r\n      );\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [selectedTask]);\r\n  useEffect(() => {\r\n    let upcTasks = [];\r\n    let pastTasks = [];\r\n    for (const task of tasks) {\r\n      if (isFuture(task.dueDate)) {\r\n        upcTasks.push(task);\r\n      } else {\r\n        pastTasks.push(task);\r\n      }\r\n    }\r\n    setUpcTasks(upcTasks);\r\n    setPastTasks(pastTasks);\r\n  }, [tasks]);\r\n  if (!subject) return <Text>Selecciona una materia</Text>;\r\n  return (\r\n    <Box overflowY=\"scroll\" height=\"100%\">\r\n      <Flex\r\n        justify=\"space-between\"\r\n        p={3}\r\n        position=\"sticky\"\r\n        top=\"0\"\r\n        bg={bg}\r\n        color={color}\r\n        shadow=\"sm\"\r\n        zIndex=\"2\"\r\n        align=\"center\"\r\n      >\r\n        <Heading size=\"sm\">Tareas de {subject.name}</Heading>\r\n      </Flex>\r\n      {upcTasks.map((task) => (\r\n        <Task\r\n          key={task.id}\r\n          content={task.content}\r\n          dueDate={task.dueDate}\r\n          finished={task.finished}\r\n          onClick={() => onSelect(task)}\r\n          isActive={selectedTask?.id === task.id}\r\n        />\r\n      ))}\r\n      {pastTasks.length > 0 && (\r\n        <Flex\r\n          justify=\"space-between\"\r\n          p={3}\r\n          position=\"sticky\"\r\n          top=\"0\"\r\n          bg={bg}\r\n          color={color}\r\n          shadow=\"sm\"\r\n          zIndex=\"2\"\r\n          align=\"center\"\r\n        >\r\n          <Heading size=\"sm\">Tareas pasadas</Heading>\r\n        </Flex>\r\n      )}\r\n      {pastTasks.map((task) => (\r\n        <Task\r\n          key={task.id}\r\n          content={task.content}\r\n          dueDate={task.dueDate}\r\n          finished={task.finished}\r\n          onClick={() => onSelect(task)}\r\n          isActive={selectedTask?.id === task.id}\r\n        />\r\n      ))}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import {\r\n  Text,\r\n  Box,\r\n  Checkbox,\r\n  HStack,\r\n  IconButton,\r\n  Icon,\r\n  FormControl,\r\n  FormLabel,\r\n} from \"@chakra-ui/react\";\r\nimport db, { ITask } from \"../../../db\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport gfm from \"remark-gfm\";\r\nimport { chakraUIRenderer } from \"../../../lib/chakra-markdown-renderer\";\r\nimport { format } from \"date-fns\";\r\nimport es from \"date-fns/locale/es\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { DeleteButton, ExpandableTextarea } from \"../../../components/UI\";\r\nimport { IoSaveOutline } from \"react-icons/io5\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport ReactDatePicker from \"react-datepicker\";\r\n\r\nexport interface TaskViewProps {\r\n  task?: ITask;\r\n  onUpdate: (task: ITask) => void;\r\n  onDelete: (id: number) => void;\r\n}\r\n\r\nconst TaskView: React.FC<TaskViewProps> = ({ task, onUpdate, onDelete }) => {\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [updatedContent, setUpdatedContent] = useState(\"\");\r\n  const [updatedDate, setUpdatedDate] = useState<Date>();\r\n  const textRef = useRef<any>();\r\n  const handleUpdate = async (props: Partial<ITask>) => {\r\n    await db.transaction(\"rw\", db.tasks, async () => {\r\n      await db.tasks.update(task!.id!, props);\r\n      onUpdate({ ...task, ...props } as ITask);\r\n    });\r\n  };\r\n  const handleCheckbox = (e: any) =>\r\n    handleUpdate({ finished: e.target.checked });\r\n  const handleDelete = async () => {\r\n    await db.transaction(\"rw\", db.tasks, async () => {\r\n      await db.tasks.delete(task!.id!);\r\n      onDelete(task!.id!);\r\n    });\r\n  };\r\n  const handleTurnEdit = () => {\r\n    setUpdatedContent(task!.content);\r\n    setUpdatedDate(task!.dueDate);\r\n    setIsEdit(true);\r\n  };\r\n  const handleCloseEdit = async () => {\r\n    await handleUpdate({ content: updatedContent, dueDate: updatedDate });\r\n    setIsEdit(false);\r\n  };\r\n  if (!task) return <Text>Selecciona una tarea</Text>;\r\n  return (\r\n    <Box p={6} overflowY=\"scroll\" height=\"100%\" position=\"relative\">\r\n      <HStack\r\n        position=\"absolute\"\r\n        top=\"1rem\"\r\n        right=\"1rem\"\r\n        spacing={2}\r\n        zIndex=\"2\"\r\n      >\r\n        <IconButton\r\n          aria-label=\"Turn edit mode\"\r\n          icon={isEdit ? <Icon as={IoSaveOutline} /> : <EditIcon />}\r\n          colorScheme={isEdit ? \"accent\" : \"primary\"}\r\n          variant=\"outline\"\r\n          onClick={isEdit ? handleCloseEdit : handleTurnEdit}\r\n        />\r\n        <DeleteButton\r\n          title=\"Eliminar tarea\"\r\n          text=\"¿Está seguro de querer eliminar la tarea? Esta acción no se puede deshacer.\"\r\n          onClick={handleDelete}\r\n        />\r\n      </HStack>\r\n      {isEdit ? (\r\n        <ExpandableTextarea\r\n          value={updatedContent}\r\n          onChange={setUpdatedContent}\r\n          ref={textRef}\r\n        />\r\n      ) : (\r\n        <ReactMarkdown\r\n          plugins={[gfm]}\r\n          children={task.content}\r\n          renderers={chakraUIRenderer}\r\n        />\r\n      )}\r\n      {isEdit ? (\r\n        <FormControl mt={4} mb={2}>\r\n          <FormLabel htmlFor=\"form-due-date\">Fecha de entrega</FormLabel>\r\n          <ReactDatePicker\r\n            id=\"form-due-date\"\r\n            selected={updatedDate}\r\n            onChange={setUpdatedDate as any}\r\n            showPopperArrow={true}\r\n            locale=\"es\"\r\n            showTimeSelect\r\n            timeFormat=\"p\"\r\n            timeIntervals={15}\r\n            dateFormat=\"Pp\"\r\n          />\r\n        </FormControl>\r\n      ) : (\r\n        <Text mt={4} mb={2}>\r\n          <strong>Fecha de entrega:</strong>{\" \"}\r\n          {format(task.dueDate, \"iiii Pp\", { locale: es })}\r\n        </Text>\r\n      )}\r\n      <Text mb={4}>\r\n        <strong>Anotado:</strong>{\" \"}\r\n        {format(task.createdAt, \"iiii Pp\", { locale: es })}\r\n      </Text>\r\n      <Checkbox\r\n        size=\"lg\"\r\n        colorScheme=\"green\"\r\n        isChecked={task.finished}\r\n        onChange={handleCheckbox}\r\n      >\r\n        Finalizado\r\n      </Checkbox>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TaskView;\r\n","import { Flex, Box } from \"@chakra-ui/react\";\r\nimport SubjectList from \"./SubjectList\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { ISubject, ITask } from \"../../db\";\r\nimport TaskList from \"./TaskList\";\r\nimport TaskView from \"./TaskView\";\r\n\r\nexport default function ListView() {\r\n  const [selectedSubject, setSelectedSubject] = useState<ISubject>();\r\n  const [selectedTask, setSelectedTask] = useState<ITask>();\r\n\r\n  useEffect(() => {\r\n    setSelectedTask(undefined);\r\n  }, [selectedSubject]);\r\n\r\n  return (\r\n    <Flex h=\"100vh\" paddingTop=\"56px\">\r\n      <Box flex=\"2\">\r\n        <SubjectList\r\n          onSelect={setSelectedSubject}\r\n          selectedId={selectedSubject?.id}\r\n        />\r\n      </Box>\r\n      <Box flex=\"2\">\r\n        <TaskList\r\n          subject={selectedSubject}\r\n          onSelect={setSelectedTask}\r\n          selectedTask={selectedTask}\r\n        />\r\n      </Box>\r\n      <Box flex=\"5\">\r\n        <TaskView\r\n          task={selectedTask}\r\n          onUpdate={setSelectedTask}\r\n          onDelete={() =>\r\n            setSelectedSubject((subject) =>\r\n              subject ? { ...subject } : subject\r\n            )\r\n          }\r\n        />\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport Toolbar from \"../Navigation/Toolbar\";\r\nimport CalendarView from \"../../containers/CalendarView\";\r\nimport ListView from \"../../containers/ListView\";\r\nimport { ViewMode, VIEW_MODE_LS_KEY } from \"../../util/constants\";\r\nimport { useUpdateEffect } from \"../../hooks\";\r\nimport { AddTask } from \"../UI\";\r\nimport { useDisclosure } from \"@chakra-ui/react\";\r\n\r\nconst loadViewMode = (): ViewMode =>\r\n  (localStorage.getItem(VIEW_MODE_LS_KEY) as ViewMode) || ViewMode.List;\r\n\r\nconst Layout = () => {\r\n  const [viewMode, setViewMode] = useState<ViewMode>(loadViewMode);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [resetting, setResetting] = useState(false);\r\n\r\n  useUpdateEffect(() => {\r\n    localStorage.setItem(VIEW_MODE_LS_KEY, viewMode);\r\n  }, [viewMode]);\r\n\r\n  const handleTaskAdded = () => {\r\n    onClose();\r\n    setResetting(true);\r\n    setTimeout(() => {\r\n      setResetting(false);\r\n    }, 100);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Toolbar\r\n        viewMode={viewMode}\r\n        onAddNote={onOpen}\r\n        onChangeViewMode={setViewMode}\r\n      />\r\n      {!resetting && viewMode === ViewMode.Calendar && <CalendarView />}\r\n      {!resetting && viewMode === ViewMode.List && <ListView />}\r\n      <AddTask\r\n        isOpen={isOpen}\r\n        onClose={onClose}\r\n        onTaskAdded={handleTaskAdded}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","/**\r\n * A custom useEffect hook that only triggers on updates, not on initial mount\r\n * Idea stolen from: https://stackoverflow.com/a/55075818/1526448\r\n * @param {Function} effect\r\n * @param {Array<any>} dependencies\r\n */\r\nimport { DependencyList, EffectCallback, useEffect, useRef } from \"react\";\r\n\r\nexport function useUpdateEffect(\r\n  effect: EffectCallback,\r\n  dependencies: DependencyList = []\r\n) {\r\n  const isInitialMount = useRef(true);\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false;\r\n    } else {\r\n      effect();\r\n    }\r\n    // eslint-disable-next-line\r\n  }, dependencies);\r\n}\r\n","import { extendTheme } from \"@chakra-ui/react\";\r\nimport { mode } from \"@chakra-ui/theme-tools\";\r\n\r\nconst theme = extendTheme({\r\n  styles: {\r\n    global: (props) => ({\r\n      body: {\r\n        bg: mode(\"#f7f9f9\", \"#1e1e24\")(props),\r\n      },\r\n    }),\r\n  },\r\n  colors: {\r\n    primary: {\r\n      \"50\": \"#b8d0e0\",\r\n      \"100\": \"#aac7da\",\r\n      \"200\": \"#8eb5cd\",\r\n      \"300\": \"#71a2c1\",\r\n      \"400\": \"#5590b4\",\r\n      \"500\": \"#457b9d\",\r\n      \"600\": \"#386480\",\r\n      \"700\": \"#2c4e63\",\r\n      \"800\": \"#1f3847\",\r\n      \"900\": \"#13212b\",\r\n    },\r\n    accent: {\r\n      \"50\": \"#fee0d8\",\r\n      \"100\": \"#fdd0c4\",\r\n      \"200\": \"#fbb09d\",\r\n      \"300\": \"#fa9075\",\r\n      \"400\": \"#f9704e\",\r\n      \"500\": \"#f75026\",\r\n      \"600\": \"#ec3609\",\r\n      \"700\": \"#c52d07\",\r\n      \"800\": \"#9d2406\",\r\n      \"900\": \"#761b04\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import { ChakraProvider } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport Layout from \"./components/Layout\";\nimport theme from \"./theme\";\n\nexport const App = () => {\n  return (\n    <ChakraProvider theme={theme}>\n      <Layout />\n    </ChakraProvider>\n  );\n};\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport es from \"date-fns/locale/es\";\nimport { registerLocale } from \"react-datepicker\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/table.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./styles/date-picker.css\";\n\nregisterLocale(\"es\", es);\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}